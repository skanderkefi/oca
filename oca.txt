What is the data type of x / y?
short x = 10;
short y = 3;
 
=> int (supp que la sortie n'est pas short)

What is the data type of x + y?
double x = 39.21;
float y = 2.1;
=> erreur de compilation : il faut ajouter "f" pour assurer la conversion de #double a #float

tout short va être int avant chaque opération

int x = 3;
int y = ++x * 5 / x-- + --x;

=> y = 4 * 5 / 4 + 2

For the exam, we recommend you memorize this list. Note that boolean and long, and
their associated wrapper classes, are not supported by switch statements.


private int getSortOrder(String firstName, final String lastName) {
 String middleName = "Patricia";
 final String suffix = "JR";
 int id = 0;
 switch(firstName) {
 case "Test":
 return 52;
 case middleName: // DOES NOT COMPILE
 id = 5;
 break;
 case suffix:
 id = 0;
 break;
 case lastName: // DOES NOT COMPILE
 id = 8;
 break;
 
 
 for( ; ; ) {
 System.out.println("Hello World");
}

fl for loop : fl declaration lezem ikounou les var de mm type

Java convertit réellement la boucle for-each en une boucle for standard lors de la compilation.



     Allows optional labels   Allows break statement   Allows continue statement

if          Yes                     No                     No
while       Yes                     Yes                    Yes
do while    Yes                     Yes                    Yes
for         Yes                     Yes                    Yes
switch      Yes                     Yes                    No



long x = 10;
int y =(int) 2 * x; => incompatible types: possible lossy conversion from long to int

name is a literal and therefore goes into the string pool. myObject.toString() is a string
but not a literal, so it does not go into the string pool. Strings not in the string pool are garbage collected just like any other object.

 The trim() method removes whitespace from the beginning and end of a String

objet de type String est immutable , par contre , object de type StringBuilder n'est pas



  StringBuilder a = new StringBuilder("abc");
  StringBuilder b = a.append("de");

 b = b.append("f").append("g");
 System.out.println("a=" + a);
 System.out.println("b=" + b); 
 ça donne a=abcdefg et b=abcdefg , a et b deux variable qui reference du seul objet StringBuilder
 (car new .. est appelée une seule fois => un seul objet :) )
 
 
 Size is the number of characters currently in the sequence, and capacity is the number
of characters the sequence can currently hold. Since a String is immutable, the size and
capacity are the same. The number of characters appearing in the String is both the size
and capacity.
For StringBuilder, Java knows the size is likely to change as the object is used. When
StringBuilder is constructed, it may start at the default capacity (which happens to be
16) or one of the programmers choosing.
w wa9teli nakhtarou ahna el capacity (new StringBuilder(capacité)) w wa9teli el size yaani
aadad les charactères ifout el capacity , java izid fel capaciti (size + 1 ....)

StringBuilder delete(int start, int end)
StringBuilder deleteCharAt(int index)

methode reverse te9lb el chaine

toString() converte l objet stringBuilder à String


StringBuilder one = new StringBuilder();
StringBuilder two = new StringBuilder();
StringBuilder three = one.append("a");
System.out.println(one == two); // false
System.out.println(one == three); // true


  StringBuilder one = new StringBuilder();
StringBuilder two = new StringBuilder("a");
StringBuilder three = one.append("a");
System.out.println(one == two); // false
System.out.println(one == three); // true 



String x = "Hello World";
String y = "Hello World";
jvm , dans ce cas, crée un seul pool de chaine et 2 pointeurs(donc x == y)

String x = new String("Hello World");
String y = "Hello World"; // ici , chaque string est isolée


String x = "Hello World";
String z = " Hello World".trim();
System.out.println(x.equals(z)); // true :  to check the values inside the String rather than the String itself. 
System.out.println(x==z); // false

StringBuilder did not implement equals()
 If you call equals() on two StringBuilder instances, it will check reference equality.

objet1 == objet2 ça compare les reference equality
objet1.equals(objet2) ça compare les reference si cet objet n'implemente pas 
la methode equals , si l'implemente , il va comparer la valeur

int[] numbers2 = {42, 55, 99}; // anonymous array (no size )

int[] ids, types;// two arrays
int ids[], types; // one int array and the second is int

 The equals() method on arrays does not look at the elements of the array,
 it look at the reference to the array object



StringBuilder is not a String.

10 elements in our array, this means only numbers[0] through numbers[9] are valid.

Arrays.sort(myArray); // trier un array

 String[] strings = { "10", "9", "100" };
Arrays.sort(strings);// ça donne : 10 100 9 car le string se compare de 1 à 9 (les nombres se comparent avant le les lettre
et les min avant maj)




 you have to know how many elements will be in the array when you create it and then you are stuck with that choice. Just like a StringBuilder, ArrayList can change size at runtime as needed.


String to wrapper class : WrapperClass (expl Integer , Boolean ...) a = WrapperClass.ValueOf("dfjdfnj");

 
date and time manipulation:
date and time are immutable , so when we manipulate it , java creates a reference var to reff to the same value just like String object
newVarRefDtaObj = dateObject.plusWeek(int nbWeek) // or day or year : creates new reference variable to point to the new date and minus is the inverse of plus

Whenever you see immutable types, pay attention to make sure the return value of a
method call isn't ignored.



NB: il est interdit de contenir des primitives dans arrayList ( Java will autobox)

note that most StringBuilder methods return a reference to the current instance of StringBuilder



An immutable object cannot be garbage collected.



"hello" lenght = 4


total += letters.substring(6, 5).length(); //exception index out of




Date[] dates[] = new Date[2][]; // ça marche




longueur : dans array ="length" et dans arrayList()="size()"

String, Integer, Double are Immutable classes
Java arrayLists are Mutables.
Java arrays are always mutable in that you can assign new values to elements of the array. ... 
However, the length of an array is immutable. If you need to change the array length, you need to allocate a new array,
 copy over any elements you want to keep, and assign the new array to your variable/field/array element.



array n'implemente pas equals donc elle va comparer la refference et pas le contenu w 3aks el arrayList

If you call remove(0) using an empty ArrayList object : indexOutOfBound



default void walk2() {} // DOES NOT COMPILE
void public walk3() {} // DOES NOT COMPILE

method specifier: native :  Used when interacting with code written in another language such as C++.


 static void fun(int ...a){...}; fun(100); // one parameter 
        fun(1, 2, 3, 4);  // four parameters 
        fun();            // no parameter et tout marche à la perfection




 package pond.swan;
 import pond.shore.Bird; // in different package than Bird
 public class Swan extends Bird { // but subclass of bird
 public void swim() {
 floatInWater(); // package access to superclass
 System.out.println(text); // package access to superclass
 }
public void helpOtherBirdSwim() {
 Bird other = new Bird();
 other.floatInWater(); // DOES NOT COMPILE
 System.out.println(other.text); // DOES NOT COMPILE
Bird other1 = new Goose();
 other1.floatInWater(); // DOES NOT COMPILE
 }
 }


 main() can be called just like any other static method.



 member means field or method.

Static vs. instance calls : 
Type : Static method , Calling : Another static method or variable , Legal? Yes , How? Using the classname
Type : Static method , Calling :  An instance method or variable , Legal? No
Type : instance method , Calling :  A static method or variable , Legal? Yes , How? Using the classname or a reference variable
Type : instance method , Calling :  Another instance method or variable , Legal? Yes , How? Using a reference variable






import static statics.A.TYPE;
import static statics.B.TYPE; // DOES NOT COMPILE


Java is a pass-by-value language. 



fama des languages yekhdmou par défaut b "passe par valeur" w fama des languages yekhdmou b "pass by reference"


public void fly(int numMiles) { }
public static void fly(int numMiles) { } // DOES NOT COMPILE because static modifier doesnt distinguish


public void fly(int[] lengths) { }
public void fly(int... lengths) { } // DOES NOT COMPILE indistingable


public void fly(int numMiles) { }
public void fly(Integer numMiles) { } // where we call one of these, java ibajel l paramètre int aala Integer ken bech na3mlou fly(5,3)expl



Rule                     Example of what will be chosen for glide(1,2)
Exact match by type      public String glide(int i, int j) {}
Larger primitive type    public String glide(long i, long j) {}
Autoboxed type public    String glide(Integer i, Integer j) {}
Varargs                  public String glide(int... nums) {} 


public class HelloWorld{

public helloWorld(){} // doesnt compile lezem "H"snn yehsebha methode


class Rabbit4 {
 private Rabbit4() { }
} 
Rabbit4 r4 = new Rabbit4(); // DOES NOT COMPILE
 khater tq aamlt constructeur(sans paramètres) maadech i3ayet lel constr par défaut



constructor chaining : Une technique courante consiste à demander à chaque constructeur d'ajouter un paramètre jusqu'à
 ce qu'il arrive au constructeur qui fait tout le travail





static { new YetMoreInitializationOrder(); }// meme si initialisation statique ama eli fi wostha ykhaliha fel priorité mta3 el constructeur

sometimes , we dont declare set method to initialize the class as immutable, but we are guilty when we set the constructeur return some object like StringBuilder because the caller can edit
 whithout calling set method



print(animals, a -> a.canHop()); // lambda example


a -> a.canHop() //a= paramètre name , -> = arrow , a.canhop() = body
(Animal a) -> { return a.canHop(); }
// 2 lignes do same thing , return and ; are required because in the bloc


print(a, b -> a.startsWith("test")); // DOES NOT COMPILE
 , we should make (a,b)


boolean wantWhetherCanHop = true;
print(animals, a -> a.canHop() == wantWhetherCanHop);
//fine

(a, b) -> { int c = 0; return 5;}//fine
(a, b) -> { int a = 0; return 5;} // DOES NOT COMPILE

NB: Lambdas work with interfaces that have only one method.These are called functional
interfacesinterfaces that can be used with functional programming. 


Predicates: 
public interface Predicate<T> {
 boolean test(T t);
}


 import java.util.*;
2: import java.util.function.*;
3: public class PredicateSearch {
4: public static void main(String[] args) {
5: List<Animal> animals = new ArrayList<Animal>();
6: animals.add(new Animal("fish", false, true));
7:
8: print(animals, a -> a.canHop());
9: }
10: private static void print(List<Animal> animals, Predicate<Animal>?
checker) {
11: for (Animal animal : animals) {
12: if (checker.test(animal))
13: System.out.print(animal + " ");
14: }


on peut faire :
 bunnies.removeIf(s -> s.charAt(0) != 'h');


   default void method() { }

 // default place is not here

final static void method3() { }
static final void method3() { } // c kifkif


public void moreE(String[] values, ...int nums) {}// does not compile

public void moreG(String[] values, int[] nums) {}//compile


 private static HelloWorld h = new HelloWorld();
//works



tnajem ta3mel une methode aandha nafs l esm mtaa lclasse , mais lazem tkoun aandha return type betbi3a bech tfara9 binetha w bin l constructeur


NB: The protected and private modifiers can only be applied to inner classes,

The default package private modifier, which is the lack of any access modifier,
indicates the class can be accessed only by a subclass or class within the same package.


a Java file can have many classes but at most one public class, ma2aktherech , In fact, it may have no public class at all.


class Rodent {}
public class Groundhog extends Rodent {}
If we were to update the Rodent class with the public access modifi er, the Groundhog.java
fi le would not compile unless the Rodent class was moved to its own Rodent.java fi le.
The rules for applying class access modifi ers are identical for interfaces.

java.lang.Object is the only class that doesn’t have any parent classes.


public class Zoo {
} w lcompiler yrodha :
public class Zoo extends java.lang.Object {
}



Like the this() command , the super() command may only be used as the fi rst statement of the constructor.


bech t'heriti mn class aandha constructeur écrit, lezem taaml constructeur f sub class w taayet lel constructeur mta3 l mère b super
si non Java will insert a no-argument super() as the first statement of the constructor.If the parent doesn’t have a no-argument constructor and the child doesn’t define any constructors, the compiler will throw an error


THE 5 RULE OF Hiding Static Methods :
1. The method in the child class must have the same signature as the method in the parent
class.
2. The method in the child class must be at least as accessible or more accessible than the
method in the parent class.
3. The method in the child class may not throw a checked exception that is new or
broader than the class of any exception thrown in the parent class method.
4. If the method returns a value, it must be the same or a subclass of the method in the
parent class, known as covariant return types.
5. The method defined in the child class must be marked as static if it is marked as
static in the parent class (method hiding). Likewise, the method must not be marked
as static in the child class if it is not marked as static in the parent class (method
overriding). 
Note that the fi rst four are the same as the rules for overriding a method.


Overriding vs. Hiding Methods:
Unlike overriding a method, in which a child method replaces the parent method in calls defined in both the parent and child, hidden methods only replace parent methods in the calls defined in the child class.

RULE: final methods cannot be overridden or hidden.

Why Mark a Method as final?
Although marking methods as final prevents them from being overridden, it does have
advantages in practice. For example, you’d mark a method as final when you’re defi n-
ing a parent class and want to guarantee certain behavior of a method in the parent class,
regardless of which child is invoking the method.

NB: Java doesn’t allow variables to be overridden but instead hidden.If you’re referencing the variable from within the parent class, the variable defined in the parent class is used. Alternatively, if you’re referencing the variable from within a child class, the variable defined in the child class is used.

-Matnajemch taaaml methode abstraite w finale ou private fard wa9t khater tu vas la redéfinir ultérieurement
methode abstraite protected in the parent class, it must be marked as protected or public in the child class.

- 'y' hérite de 'x' qui est abstraite, lezem t'implementi les methode abst, w ba3d 'z' hérite de 'y' , 3adi ken matimplementihomch


Abstract Class Defi nition Rules:
1. Abstract classes cannot be instantiated directly.
2. Abstract classes may be defined with any number, including zero, of abstract and non-
abstract methods.
3. Abstract classes may not be marked as private or final .
4. An abstract class that extends another abstract class inherits all of its abstract methods
as its own abstract methods.
5. The first concrete class that extends an abstract class must provide an implementation
for all of the inherited abstract methods.


Abstract Method Defi nition Rules:
1. Abstract methods may only be defined in abstract classes.
2. Abstract methods may not be declared private or final .
3. Abstract methods must not provide a method body/implementation in the abstract
class for which is it declared.
4. Implementing an abstract method in a subclass follows the same rules for overriding a
method. For example, the name and signature must be the same, and the visibility of
the method in the subclass must be at least as accessible as the method in the parent
class.


Rules for defining abstract classes.
1. Interfaces cannot be instantiated directly.
2. An interface is not required to have any methods.
3. An interface may not be marked as final .
4. All top-level interfaces are assumed to have public or default access, and they must
include the abstract modifier in their definition. Therefore, marking an interface as
private , protected , or final will trigger a compiler error, since this is incompatible
with these assumptions.
5. All nondefault methods in an interface are assumed to have the modifiers abstract
and public in their definition. Therefore, marking a method as private , protected ,
or final will trigger compiler errors as these are incompatible with the abstract and
public keywords.




There are two inheritance rules you should keep in mind when extending an interface:
1.
An interface that extends another interface, as well as an abstract class that
implements an interface, inherits all of the abstract methods as its own abstract
methods.
2.
The first concrete class that implements an interface, or extends an abstract class
that implements an interface, must provide an implementation for all of the inherited
abstract methods.


an interface cant extend a class .

Une classe implemente 2 interface qui ont le même nom de leurs méthodes : compile quand ces deux méthodes n'ont pas le meme paramètre et mm type de retour , mais ne compile pas quand ces deux ont mm paramètre et de diff type de retour


Here are two interface variables rules:
1. Interface variables are assumed to be public , static , and final . Therefore, marking
a variable as private or protected will trigger a compiler error, as will marking any
variable as abstract .
2. The value of an interface variable must be set when it is declared since it is marked as
final .



public interface CanSwim {
int MAXIMUM_DEPTH = 100;
final static boolean UNDERWATER = true;
public static final String TYPE = "Submersible";
}
=
||
 v
public interface CanSwim {
public static final int MAXIMUM_DEPTH = 100;
public static final boolean UNDERWATER = true;
public static final String TYPE = "Submersible";
}
As we see in this example, the compiler will automatically insert public static final to
any constant interface variables it fi nds missing those modifi ers. Also note that it is a com-
mon coding practice to use uppercase letters to denote constant values within a class.


DEFAULT METHODS RULES :
1. A default method may only be declared within an interface and not within a class or
abstract class.
2. A default method must be marked with the default keyword. If a method is marked as
default , it must provide a method body.
3. A default method is not assumed to be static , final , or abstract , as it may be used
or overridden by a class that implements the interface.
4.Like all methods in an interface, a default method is assumed to be public and will not
compile if marked as private or protected .



3adi ken tekteb fi interface X une methode par défaut (def + corps) w tji l interface okhra qui hérite de X w tekteb ken la définition de la méthode (comme abstraite) , forcing any class that implements the SharkFamily interface to provide an implementation of the method.

If a class implements two interfaces that have default methods with the same name and
signature, the compiler will throw an error: if the subclass overrides the duplicate default methods, the code will compile without issue.


Here are the static interface method rules you need to be familiar with:
1. Like all methods in an interface, a static method is assumed to be public and will not compile if marked as private or protected .
2. To reference the static method, a reference to the name of the interface must be used.

même si une classe C implémente une interface I w 7ajetha b methode statique fl interface , lezem taaml I.methodName() , mouch t3aytlha b esmha toul kima b9iet les méthodes


Here are some basic rules to keep in mind when casting variables:
1. Casting an object from a subclass to a superclass doesn’t require an explicit cast.
2. Casting an object from a superclass to a subclass requires an explicit cast.
3. The compiler will not allow casts to unrelated types.
4. Even when the code compiles without issue, an exception may be thrown at runtime if
the object being cast is not actually an instance of that class.


A virtual method is a method in which the specific implementation is not determined until runtime. In fact, all non-final, non-static, and non-private Java methods are considered virtual methods, since any of them can be overridden at runtime.
Interface variables are assumed to be public, static, and final.

A final method in a superclass cannot be overridden in a subclass

CHAPTER 6 - EXCEPTIONS :
java.lang.Object -> java.lang.throwable -> java.lang.Error
java.lang.Object -> java.lang.throwable -> java.lang.Exception-> java.lang.RuntimeException

Runtime exceptions(unexpected) are also known as unchecked exceptions.
A checked exception includes Exception and all subclasses that do not extend RuntimeException . Checked exceptions tend to be more anticipated.

throws simply declares that the method might throw an Exception . It also might not.
An example of a runtime exception is a NullPointerException

Types of exceptions :

Type                  How to recognize                         Okay for program to catch?       Is program required to handle or declare?
Runtime exception    Subclass of RunTime Exception                               Yes                                  No
Checked exception    Subclass of Exception but not subclass of RuntimeException  yes                                 yes
Error                         Subclass of Error                                  No                                   No


Runtime Exceptions
Runtime exceptions extend RuntimeException . They don’t have to be handled or declared.They can be thrown by the programmer or by the JVM. Common runtime exceptions include the following:

ArithmeticException
Thrown by the JVM when code attempts to divide by zero

ArrayIndexOutOfBoundsException Thrown by the JVM when code uses an illegal index to access an array

ClassCastException 
Thrown by the JVM when an attempt is made to cast an exception to a subclass of which it is not an instance

IllegalArgumentException Thrown by the programmer to indicate that a method has been passed an illegal or inappropriate argument

NullPointerException Thrown by the JVM when there is a null reference where an object is required

NumberFormatException Thrown by the programmer when an attempt is made to convert a string to a numeric type but the string doesn’t have an appropriate format




Checked Exceptions: 
-FileNotFoundException Thrown programmatically when code tries to reference a file
that does not exist
-IOException Thrown programmatically when there’s a problem reading or writing a file

Errors:
Errors extend the Error class. They are thrown by the JVM and should not be handled or declared. Errors are rare, but you might see these:
ExceptionInInitializerError Thrown by the JVM when a static initializer throws an exception and doesn’t handle it.
static {
int[] countsOfMoose = new int[3];
int num = countsOfMoose[-1];
}

StackOverflowError Thrown by the JVM when a method calls itself too many times: When Java calls methods, it puts parameters and local variables on the stack. After doing this a very large number of times, the stack runs out of room and overflows

NoClassDefFoundError Thrown by the JVM when a class that the code uses is available at compile time but not runtime.


-fl checked exception :ki tji t'override methode mayjich fl subclass thotelha throws exception1 w fl classe mère lé (ama l3aks 3adi wela descendant (mère : exception w fille : exception1 extends exception)) fl runtimeException(unchecked exception) légale


-Subclasses of java.lang.Error are exceptions that a programmer should not attempt to handle.

